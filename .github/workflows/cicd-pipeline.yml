name: Flask CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  release:
    types:
      - created

jobs:
  # Job 1: Set up Python and Install Dependencies
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # Ensure pytest is installed

  # Job 2: Run Tests
  run_tests:
    runs-on: ubuntu-latest
    needs: install_dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # Ensure pytest is installed

      - name: Run tests
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q  # Run tests in 'tests' directory

  # Job 3: Build application (if tests pass)
  build:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        run: |
          echo "Build step: Preparing app for deployment"

  # Job 4: Deploy to Staging (on push to staging branch)
  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Example: SSH into your server and deploy the app
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.DEPLOYMENT_KEY }} user@staging-server "cd /path/to/staging/directory && git pull && sudo systemctl restart flask-app"
          # Adjust the above command based on your server setup (e.g., restart Flask app)

  # Job 5: Deploy to Production (on release tag)
  deploy_production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Example: SSH into your server and deploy the app
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.DEPLOYMENT_KEY }} user@production-server "cd /path/to/production/directory && git pull && sudo systemctl restart flask-app"
          # Adjust the above command based on your production setup (e.g., restart Flask app)
